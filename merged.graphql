<<<<<<< HEAD
<<<<<<< HEAD
=======

schema {
	query: Query
}

type Query {
	send_message(message: String!, plugins: PluginMaster!): [PluginReturn!]!
    get_messages(plugin: String!): [MessageReturn!]!
}

type Status { # corresponding to APIReturn
	error: Boolean!
	key: String!
	message: String
}



# Note: input PluginMaster {} will be generated during the build process
# Sample:
# input PluginMaster {
#   facebook: FacebookConfig
# }

type PluginReturn {
	plugin: String!
	errors: [Status!]!
}

# Update this with every plugin type!
type PluginMasterReturn  {
	live_site: LiveSiteConfigType
	slack: SlackConfigType
	twilio: TwilioConfigType
	twitter: TwitterConfigType
}

type MessageReturn {
    message: String
    config: MetaDataType!
    _id: ID!
    createdAt: String!
    errors: [Status!]!
}

type LiveSiteConfigType {
	title: String
	icon: String
}


type SlackConfigType {
	channels: [String!]!
	at_channel: Boolean!
	at_here: Boolean!
}

type TwilioConfigType {
	numbers: [String!]
    groups: [String!]
}

type TwitterConfigType {
	_: Boolean
}

type MetaDataType {
    title: String
    icon: String
    channels: [String!]!
    at_channel: Boolean!
    at_here: Boolean!
    numbers: [String!]
    groups: [String!]
    _: Boolean
}

input PluginMaster {
	slack: SlackConfig
}

input SlackConfig {
		channels: [String!]!
		at_channel: Boolean!
		at_here: Boolean!
	}
<<<<<<< HEAD

input TwilioConfig {
		numbers: [String!]
    groups: [String!]
	}

input TwitterConfig {
		_: Boolean
	}
>>>>>>> graphql get_messages endpoint complete
=======
>>>>>>> init commit
=======
>>>>>>> Uncommented other notification plugins
