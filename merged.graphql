
schema {
	query: Query
}

type Query {
	send_message(message: String!, plugins: PluginMaster!): [PluginReturn!]!
    get_messages(plugin: String!): [MessageReturn!]!
}

type Status { # corresponding to APIReturn
	error: Boolean!
	key: String!
	message: String
}



# Note: input PluginMaster {} will be generated during the build process
# Sample:
# input PluginMaster {
#   facebook: FacebookConfig
# }

type PluginReturn {
	plugin: String!
	errors: [Status!]!
}

type MessageReturn {
    message: String
    config: MetaDataType!
    _id: ID!
    createdAt: String!
    errors: [Status!]!
}

input PluginMaster {
	live_site: LiveSiteConfig
	slack: SlackConfig
	twilio: TwilioConfig
	twitter: TwitterConfig
	app_g_t: AppGTConfig
}

input LiveSiteConfig {
		title: String
		icon: String
	}

type LiveSiteConfigType {
		title: String
		icon: String
	}

input SlackConfig {
		channels: [String!]!
		at_channel: Boolean!
		at_here: Boolean!
	}

type SlackConfigType {
		channels: [String!]!
		at_channel: Boolean!
		at_here: Boolean!
	}

input TwilioConfig {
		numbers: [String!]
        groups: [String!]
	}

type TwilioConfigType {
		numbers: [String!]
        groups: [String!]
	}

input TwitterConfig {
		_: Boolean
	}

type TwitterConfigType {
		_: Boolean
	}

input AppGTConfig {
		header: String,
		tags: String
	}

type AppGTConfigType {
		header: String,
		tags: String
	} 

type MetaDataType {
		title: String
		icon: String
	
		channels: [String!]!
		at_channel: Boolean!
		at_here: Boolean!
	
		numbers: [String!]
        groups: [String!]
	
		_: Boolean
	
		header: String,
		tags: String
	}
