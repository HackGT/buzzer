schema {
	query: Query
}

type Query {
	send_message(message: String!, plugins: PluginMaster!): [PluginReturn!]!
    get_messages(plugin: String!): [MessageReturn!]!
}

type Status { # corresponding to APIReturn
	error: Boolean!
	key: String!
	message: String
}



# Note: input PluginMaster {} will be generated during the build process
# Sample:
# input PluginMaster {
#   facebook: FacebookConfig
# }

type PluginReturn {
	plugin: String!
	errors: [Status!]!
}

# Update this with every plugin type!
type PluginMasterReturn  {
	live_site: LiveSiteConfigType
	slack: SlackConfigType
	twilio: TwilioConfigType
	twitter: TwitterConfigType
}

type MessageReturn {
    message: String
    plugins: PluginMasterReturn!
    _id: ID!
    createdAt: String!
    errors: [Status!]!
}

type LiveSiteConfigType {
	title: String
	icon: String
}


type SlackConfigType {
	channels: [String!]!
	at_channel: Boolean!
	at_here: Boolean!
}

type TwilioConfigType {
	numbers: [String!]
    groups: [String!]
}

type TwitterConfigType {
		_: Boolean
	}
